...
#
## Install KVM on Fedora

# There are a number of other virtualization management packages that are recommended when using virtualization.
sudo dnf install qemu-kvm libvirt virt-install virt-manager virt-viewer edk2-ovmf swtpm qemu-img guestfs-tools libosinfo tuned

## Install VirtIO Drivers for Windows Guests.

# Install the VirtIO repository.
sudo wget https://fedorapeople.org/groups/virt/virtio-win/virtio-win.repo -O /etc/yum.repos.d/virtio-win.repo

# Install the virtio-win package.
sudo dnf install virtio-win

## Enable the Modular libvirt Daemon
for drv in qemu interface network nodedev nwfilter secret storage; do \
    sudo systemctl enable virt${drv}d.service; \
    sudo systemctl enable virt${drv}d{,-ro,-admin}.socket; \
  done

# A reboot is recommended so that the KVM can properly start.
sudo reboot

## Validate Host Virtualization Setup
sudo virt-host-validate qemu

# If the following warning message appears from the validation tool:
#
# QEMU: Checking for device assignment IOMMU support : WARN (No ACPI DMAR table found, IOMMU either disabled in BIOS or not supported by this hardware platform)
#
# Meaning: Your Intel processor only supports the VT-x (vmx) feature and not VT-d.
# 
# VT-d is used to implement a feature known as PCIe Pass-through. VT-d enables virtual machines to have direct access to specific I/O devices such as graphics cards, network adapters, and storage controllers.
#
# QEMU: Checking if IOMMU is enabled by kernel : WARN (IOMMU appears to be disabled in kernel. Add intel_iommu=on to kernel cmdline arguments)
# 
# Meaning: Your Intel CPU supports the VT-d capability, but it must be enabled in the kernel.
# 

# To enable VT-d, open the /etc/default/grub file and add 'intel_iommu=on iommu=pt' to the GRUB_CMDLINE_LINUX line.
sudo vim /etc/default/grub

With an AMD CPU, IOMMU is activated by default. To activate pass-through mode as well, simply add iommu=pt.
sudo vim /etc/default/grub

# Regenerate the grub configuration file.
sudo grub2-mkconfig -o /boot/grub2/grub.cfg
sudo reboot

# Validate the host again to ensure that no issues remain.
sudo virt-host-validate qemu

# On the Intel CPU, verify that the VT-d is enabled.
dmesg | grep -i -e DMAR -e IOMMU

# On the AMD CPU, verify that the AMD-Vi is enabled.
dmesg | grep -i -e AMD-Vi

# QEMU: Checking for secure guest support : WARN (Unknown if this platform has Secure Guest support)
# 
# Meaning: Enable AMD Secure Encrypted Virtualization (SEV) support.
# 
# If you have an Intel CPU, you can safely ignore this warning. This applies to AMD CPUs.
# 
# The SEV feature is only supported on (most) EPYC and Ryzen Pro processors. This feature enables libvirt/kvm to encrypt memory.

# Test feature support
lscpu | grep sev

## Optimize the Host with TuneD

# Enable and start the TuneD service and optimizes the host for running KVM guests
sudo systemctl enable --now tuned
sudo tuned-adm profile virtual-host

# Check errors.
sudo tuned-adm verify

## Configure a Network Bridge

# Show the interfaces and their names.
sudo nmcli device status

# Create a bridge interface
sudo nmcli connection add type bridge con-name bridge0 ifname bridge0

# Assign the interface to the bridge
sudo nmcli connection add type ethernet slave-type bridge con-name 'Bridge connection 1' ifname enp2s0 master bridge0

# Activate the connection.
sudo nmcli connection up bridge0

# Enable the connection.autoconnect-slaves parameter of the bridge connection.
sudo nmcli connection modify bridge0 connection.autoconnect-slaves 1

# Reactivate the bridge.
sudo nmcli connection up bridge0

# Verify the connection.
sudo nmcli device status
ip -brief addr show dev bridge0

# Create an XML file called nwbridge.xml and fill it with the following information.
vim nwbridge.xml
<network>
  <name>nwbridge</name>
  <forward mode='bridge'/>
  <bridge name='bridge0'/>
</network>

# Define nwbridge as a persistent virtual network.
sudo virsh net-define nwbridge.xml

# Activate the nwbridge and set it to autostart on boot.
sudo virsh net-start nwbridge
sudo virsh net-autostart nwbridge

# Now you can safely delete the nwbridge.xml file. 
rm nwbridge.xml

# Finally, verify that the virtual network bridge nwbridge is up and running.
sudo virsh net-list --all

## Give the User System-Wide Permission

# Add the regular user to the libvirt group.
sudo usermod -aG libvirt $USER

# Define the environment variable LIBVIRT_DEFAULT_URI in the local .bashrc file of the user.
echo "export LIBVIRT_DEFAULT_URI='qemu:///system'" >> ~/.bashrc
source ~/.bashrc

# Check again as a regular user to see which instance you are connected to.
virsh uri
-> qemu:///system

## Set ACL on the Images Directory
ls /var/lib/libvirt/images/
-> ls: cannot open directory '/var/lib/libvirt/images/': Permission denied

# First, recursively remove any existing ACL permissions on the directory.
sudo setfacl -R -b /var/lib/libvirt/images

# Grant regular user permission to the directory recursively.
sudo setfacl -R -m u:$USER:rwX /var/lib/libvirt/images

# All existing directories and files (if any) in /var/lib/libvirt/images/ now have permissions. However, any new directories and files created within this directory will not have any special permissions. To get around this, we need to enable 'default' special permissions. The 'default acls' can only be applied to directories and not to files.
sudo setfacl -m d:u:$USER:rwx /var/lib/libvirt/images

